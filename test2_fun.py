import pandas as pd
import itertools
from sklearn.metrics import mean_squared_error,confusion_matrix, precision_score, recall_score, auc,roc_curve
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import random
import math
from collections import Counter
from sklearn import metrics
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
#import xgboost as xgb
#from lightgbm import LGBMClassifier
#from xgboost import XGBClassifier
import os
import socket
import whois
from datetime import datetime
import time
from bs4 import BeautifulSoup
import urllib
import bs4
import os
import re
#Use of IP or not in domain
#url = "http://www.google.com"
#feat = []
def having_ip_address(url):
    match = re.search(
        '(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.'
        '([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|'  # IPv4
        '((0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\/)' # IPv4 in hexadecimal
        '(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}', url)  # Ipv6
    if match:
        # print match.group()
        return 1
    else:
        # print 'No matching pattern found'
        return 0

#feat.append(having_ip_address(url))


from urllib.parse import urlparse
def abnormal_url(url):
    hostname = urlparse(url).hostname
    hostname = str(hostname)
    match = re.search(hostname, url)
    if match:
        # print match.group()
        return 1
    else:
        # print 'No matching pattern found'
        return 0

#feat.append(abnormal_url(url))

def fun1(url):
    a=url.count('.')
    b=url.count('www')
    c=url.count('@')
    return a,b,c
#feat.append(url.apply(lambda i: i.count('.')))
#feat.append(url.apply(lambda i: i.count('www')))
#feat.append(url.apply(lambda i: i.count('@')))
##a,b,c = fun1(url)
##feat.append(a)
##feat.append(b)
##feat.append(c)
#df['count-www'] = df['url'].apply(lambda i: i.count('www'))
#df['count@'] = df['url'].apply(lambda i: i.count('@'))
from urllib.parse import urlparse
def no_of_dir(url):
    urldir = urlparse(url).path
    return urldir.count('/')
#feat.append(no_of_dir(url))
def no_of_embed(url):
    urldir = urlparse(url).path
    return urldir.count('//')
#feat.append(no_of_embed(url))
def shortening_service(url):
    match = re.search('bit\.ly|goo\.gl|shorte\.st|go2l\.ink|x\.co|ow\.ly|t\.co|tinyurl|tr\.im|is\.gd|cli\.gs|'
                      'yfrog\.com|migre\.me|ff\.im|tiny\.cc|url4\.eu|twit\.ac|su\.pr|twurl\.nl|snipurl\.com|'
                      'short\.to|BudURL\.com|ping\.fm|post\.ly|Just\.as|bkite\.com|snipr\.com|fic\.kr|loopt\.us|'
                      'doiop\.com|short\.ie|kl\.am|wp\.me|rubyurl\.com|om\.ly|to\.ly|bit\.do|t\.co|lnkd\.in|'
                      'db\.tt|qr\.ae|adf\.ly|goo\.gl|bitly\.com|cur\.lv|tinyurl\.com|ow\.ly|bit\.ly|ity\.im|'
                      'q\.gs|is\.gd|po\.st|bc\.vc|twitthis\.com|u\.to|j\.mp|buzurl\.com|cutt\.us|u\.bb|yourls\.org|'
                      'x\.co|prettylinkpro\.com|scrnch\.me|filoops\.info|vzturl\.com|qr\.net|1url\.com|tweez\.me|v\.gd|'
                      'tr\.im|link\.zip\.net',
                      url)
    if match:
        return 1
    else:
        return 0
#feat.append(shortening_service(url))

def fun2(url):
    a=url.count('https')
    b=url.count('http')
    c=url.count('%')
    d=url.count('?')
    e=url.count('-')
    f=url.count('=')
    g=len(str(url))
    h=len(urlparse(url).netloc)
    return a,b,c,d,e,f,g,h
##a,b,c,d,e,f,g,h = fun2(url)
##feat.append(a)
##feat.append(b)
##feat.append(c)
##feat.append(d)
##feat.append(e)
##feat.append(f)
##feat.append(g)
##feat.append(h)

#feat.append(ur.apply(lambda i : i.count('https')))
#feat.append(url.apply(lambda i : i.count('http')))
#feat.append(url.apply(lambda i: i.count('%')))
#feat.append(url.apply(lambda i: i.count('?')))
#feat.append(url.apply(lambda i: i.count('-')))
#feat.append(url.apply(lambda i: i.count('=')))
#Length of URL
#feat.append(url.apply(lambda i: len(str(i))))
#Hostname Length
#feat.append(url.apply(lambda i: len(urlparse(i).netloc)))
def suspicious_words(url):
    match = re.search('PayPal|login|signin|bank|account|update|free|lucky|service|bonus|ebayisapi|webscr',
                      url)
    if match:
        return 1
    else:
        return 0
##feat.append(suspicious_words(url))

from urllib.parse import urlparse
from tld import get_tld
import os.path

#First Directory Length
def fd_length(url):
    urlpath= urlparse(url).path
    try:
        return len(urlpath.split('/')[1])
    except:
        return 0

##feat.append(fd_length(url))

#Length of Top Level Domain
#feat.append(get_tld(url,fail_silently=True))
def tld_length(tld):
    try:
        return len(tld)
    except:
        return -1

##feat.append(tld_length(url))

def digit_count(url):
    digits = 0
    for i in url:
        if i.isnumeric():
            digits = digits + 1
    return digits
##feat.append(digit_count(url))

def letter_count(url):
    letters = 0
    for i in url:
        if i.isalpha():
            letters = letters + 1
    return letters
##feat.append(letter_count(url))

def get_features(url):
    feat = []
    feat.append(having_ip_address(url))
    feat.append(abnormal_url(url))
    a,b,c = fun1(url)
    feat.append(a)
    feat.append(b)
    feat.append(c)
    feat.append(no_of_dir(url))
    feat.append(no_of_embed(url))
    feat.append(shortening_service(url))
    a,b,c,d,e,f,g,h = fun2(url)
    feat.append(a)
    feat.append(b)
    feat.append(c)
    feat.append(d)
    feat.append(e)
    feat.append(f)
    feat.append(g)
    feat.append(h)
    feat.append(suspicious_words(url))
    feat.append(fd_length(url))
    feat.append(tld_length(url))
    feat.append(digit_count(url))
    feat.append(letter_count(url))
    return feat


#df = df.drop("tld",1)
